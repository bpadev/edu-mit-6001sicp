#lang racket

; 1.2 Procedures and the Processes They Generate
; What we have learned is analogous to that of someone who has learned the rules for how the pieces move in chess but knows...
; ..nothing of typical openings, tactics, or strategy.
; We must learn to visualize the processes generated by various types of procedures.


; 1.2.1 Linear Recursion and Iteration
; Factorial example: n! = n * (n - 1) for any positive integer n
; Linear recursive process grows linearly with n
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
(factorial 9)
; In general, an iterative process is one whose state can be summarized by a fixed number of state variables.
; When we describe a procedure as recursive, we are referring to the syntactic fact that the procedure definition refers to the procedure itself.
; But when we describe a process as following a pattern that is, say linearly recursive, we are speaking about how the process evolves, not about the syntax the procedure is written.
; An iterative process described by a recursive procedure is called tail-recursive.


; 1.2.2 Tree Recursion
; In general, the number of steps required by a tree-recursive process will be proportional to the number of nodes in the tree, while space required will be proportional to the maximum depth of the tree.
; One approach to coping with redundant computations is to arrange matters so that we automatically construct a table of values as they are computed. (tabulation or memoization).
